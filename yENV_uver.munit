/*===============================[[ beg-code ]]===============================*/
#include    "yENV.h"
#include    "yENV_priv.h"

#include    "yENV_solo.h"
#include    "yENV_uver.h"

#include    <yLOG_solo.h>
#include    <yLOG_uver.h>
#include    <yURG_solo.h>
#include    <yUNIT_solo.h>
#include    <ySTR_solo.h>
#include    <yCOLOR_solo.h>


char
koios_code_upeek   (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_file      [LEN_HUND]  = "/tmp/yurg_theia.txt";

   yUNIT_minscrpy ("yENV", "yENV_uver", "(UVER) verify micro version of peek");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   yENV__unit_quiet  ();
   yLOGS_ufile ("/tmp/apate_errors.txt");

   yUNIT_mincond  ("create a data set");
   system ("echo \"# theia is the greek titan of sight and the shinning light of the clear blue sky\"  > /tmp/yurg_theia.txt");
   system ("echo \"\"                                                                                 >> /tmp/yurg_theia.txt");
   system ("echo \"# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д\"                >> /tmp/yurg_theia.txt");
   system ("echo \"# rec type Д hex Д ---scheme-name------ Д y Д   norm  Д  bright Д\"                >> /tmp/yurg_theia.txt");
   system ("echo \"foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д\"                >> /tmp/yurg_theia.txt");
   system ("echo \"foreground Д ш61 Д unit test classic    Д - Д ш000000 Д ш404040 Д\"                >> /tmp/yurg_theia.txt");
   system ("echo \"foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д\"                >> /tmp/yurg_theia.txt");
   system ("echo \"\"                                                                                 >> /tmp/yurg_theia.txt");
   system ("echo \"# end-of-file.  done, finito, completare, whimper [¤┤иии\"                         >> /tmp/yurg_theia.txt");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  0) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a missing file");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek ("/tmp/arstoiarenst.arstionarst", YDLST_HEAD) , "(not found)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify ordinal access");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  0) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  2) , "# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  4) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  6) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  8) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file,  9) , "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt negative offset");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, -1) , "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursor access (forward)");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_HEAD) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_NEXT) , "");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_NEXT) , "# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_NEXT) , "# rec type Д hex Д ---scheme-name------ Д y Д   norm  Д  bright Д");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_NEXT) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursor access (backward)");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_TAIL) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_PREV) , "");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_PREV) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursor access (past end)");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_TAIL) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minstr   ("... check normal"                   , yENV_upeek (x_file, YDLST_NEXT) , "(n/a)");
   yUNIT_mindnoc  ();

   yENV__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs  ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(scripts)------------------------*/
   koios_code_upeek     (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

